// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  phoneNumber   String?   @db.Text // Encrypted
  address       String?   @db.Text // Encrypted
  personalId    String?   @db.Text // Encrypted (KTP/NIK)
  bankAccount   String?   @db.Text // Encrypted
  companyName   String?   @db.Text // Encrypted
  companyAddress String?  @db.Text // Encrypted
  taxId         String?   @db.Text // Encrypted (NPWP)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  status        UserStatus @default(ACTIVE)
  preferences   Json?     // User preferences as JSON
  metadata      Json?     // Additional metadata
  timezone      String    @default("Asia/Jakarta")
  language      String    @default("id")
  currency      String    @default("IDR")

  // Relations
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  auditLogs     AuditLog[]
  apiKeys       ApiKey[]
  plantations   Plantation[]
  workers       Worker[]
  reports       Report[]
  notifications Notification[]
  documents     Document[]
  tasks         Task[]
  teams         TeamMember[]

  @@index([email])
  @@index([createdAt])
  @@index([isActive])
  @@index([role])
  @@index([status])
  @@map("users")
}

// Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  deviceInfo   Json?    // Device information

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Subscription Management
model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  plan              SubscriptionPlan @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  cancelledAt       DateTime?
  trialEndsAt       DateTime?
  metadata          Json?    // Additional subscription metadata
  features          Json?    // Enabled features for this plan

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@map("subscriptions")
}

// Payment Management
model Payment {
  id            String   @id @default(cuid())
  userId        String
  subscriptionId String?
  amount        Decimal  @db.Decimal(12, 2)
  currency      String   @default("IDR")
  status        PaymentStatus
  paymentMethod PaymentMethod
  bankCode      String?
  bankName      String?
  accountNumber String?
  accountName   String?
  qrCode        String?  @db.Text
  qrCodeUrl     String?
  referenceId   String   @unique
  externalId    String?  // External payment gateway ID
  metadata      Json?    // Additional payment metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  failedAt      DateTime?
  refundedAt    DateTime?
  expiresAt     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@index([referenceId])
  @@map("payments")
}

// Plantation Management
model Plantation {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  location    String
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  area        Decimal  @db.Decimal(10, 2) // in hectares
  soilType    String?
  plantingDate DateTime?
  expectedHarvest DateTime?
  status      PlantationStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workers Worker[]
  reports Report[]
  tasks   Task[]

  @@index([userId])
  @@index([status])
  @@index([area])
  @@map("plantations")
}

// Worker Management
model Worker {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  name        String
  email       String?
  phoneNumber String?
  position    String
  salary      Decimal? @db.Decimal(10, 2)
  startDate   DateTime @default(now())
  endDate     DateTime?
  status      WorkerStatus @default(ACTIVE)
  skills      String[] // Array of skills
  certifications String[] // Array of certifications
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)
  tasks Task[]

  @@index([userId])
  @@index([plantationId])
  @@index([status])
  @@map("workers")
}

// Report Management
model Report {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  title       String
  type        ReportType
  content     Json     // Report content as JSON
  data        Json?    // Additional data
  attachments String[] // File URLs
  status      ReportStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([plantationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

// Task Management
model Task {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  workerId    String?
  title       String
  description String?
  type        TaskType
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  estimatedHours Decimal? @db.Decimal(5, 2)
  actualHours   Decimal? @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)
  worker Worker? @relation(fields: [workerId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([plantationId])
  @@index([workerId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

// Document Management
model Document {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        DocumentType
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  tags        String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isPublic])
  @@map("documents")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  data      Json?    // Additional data
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// API Management
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json     // Array of permissions
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

// Audit Trail
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  resource  String   // User, Payment, Subscription, etc.
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

// Analytics Schema
model Analytics {
  id        String   @id @default(cuid())
  event     String   // page_view, button_click, form_submit, etc.
  userId    String?
  sessionId String?
  properties Json?   // Event properties
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([createdAt])
  @@map("analytics")
}

// System Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  type      ConfigType @default(STRING)
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_configs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  MANAGER
  WORKER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
  TRIALING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  BANK_TRANSFER
  QR_CODE
  CREDIT_CARD
  E_WALLET
  CASH
}

enum PlantationStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  HARVESTING
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ReportType {
  MONTHLY
  WEEKLY
  DAILY
  HARVEST
  MAINTENANCE
  FINANCIAL
  CUSTOM
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TaskType {
  PLANTING
  HARVESTING
  MAINTENANCE
  FERTILIZING
  PEST_CONTROL
  IRRIGATION
  PRUNING
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TeamRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum DocumentType {
  REPORT
  CERTIFICATE
  CONTRACT
  INVOICE
  RECEIPT
  MANUAL
  OTHER
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  TASK_ASSIGNED
  PAYMENT_RECEIVED
  REPORT_READY
  SYSTEM_UPDATE
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}