// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phoneNumber   String?
  address       String?
  personalId    String?
  bankAccount   String?
  companyName   String?
  companyAddress String?
  taxId         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  role          String    @default("USER")
  status        String    @default("ACTIVE")
  preferences   String?   // JSON as string
  metadata      String?   // JSON as string
  timezone      String    @default("Asia/Jakarta")
  language      String    @default("id")
  currency      String    @default("IDR")

  // Relations
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  auditLogs     AuditLog[]
  apiKeys       ApiKey[]
  plantations   Plantation[]
  workers       Worker[]
  reports       Report[]
  notifications Notification[]
  documents     Document[]
  tasks         Task[]
  teams         TeamMember[]
  
  // Extended Relations (will be added later)

  @@index([email])
  @@index([createdAt])
  @@index([isActive])
  @@index([role])
  @@index([status])
  @@map("users")
}

// Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  deviceInfo   String?  // JSON as string

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Subscription Management
model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  plan              String   @default("FREE")
  status            String   @default("ACTIVE")
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  cancelledAt       DateTime?
  trialEndsAt       DateTime?
  metadata          String?  // JSON as string
  features          String?  // JSON as string

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@map("subscriptions")
}

// Payment Management
model Payment {
  id            String   @id @default(cuid())
  userId        String
  subscriptionId String?
  amount        Float
  currency      String   @default("IDR")
  status        String
  paymentMethod String
  bankCode      String?
  bankName      String?
  accountNumber String?
  accountName   String?
  qrCode        String?
  qrCodeUrl     String?
  referenceId   String   @unique
  externalId    String?
  metadata      String?  // JSON as string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  failedAt      DateTime?
  refundedAt    DateTime?
  expiresAt     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@index([referenceId])
  @@map("payments")
}

// Plantation Management
model Plantation {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  location    String
  latitude    Float?
  longitude   Float?
  area        Float
  soilType    String?
  plantingDate DateTime?
  expectedHarvest DateTime?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workers Worker[]
  reports Report[]
  tasks   Task[]

  @@index([userId])
  @@index([status])
  @@index([area])
  @@map("plantations")
}

// Worker Management
model Worker {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  name        String
  email       String?
  phoneNumber String?
  position    String
  salary      Float?
  startDate   DateTime @default(now())
  endDate     DateTime?
  status      String   @default("ACTIVE")
  skills      String?  // JSON as string
  certifications String? // JSON as string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)
  tasks Task[]

  @@index([userId])
  @@index([plantationId])
  @@index([status])
  @@map("workers")
}

// Report Management
model Report {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  title       String
  type        String
  content     String   // JSON as string
  data        String?  // JSON as string
  attachments String?  // JSON as string
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([plantationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

// Task Management
model Task {
  id          String   @id @default(cuid())
  userId      String
  plantationId String?
  workerId    String?
  title       String
  description String?
  type        String
  priority    String   @default("MEDIUM")
  status      String   @default("PENDING")
  dueDate     DateTime?
  completedAt DateTime?
  estimatedHours Float?
  actualHours   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plantation Plantation? @relation(fields: [plantationId], references: [id], onDelete: SetNull)
  worker Worker? @relation(fields: [workerId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([plantationId])
  @@index([workerId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

// Document Management
model Document {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        String
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  tags        String?  // JSON as string
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isPublic])
  @@map("documents")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      String?  // JSON as string
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// API Management
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions String   // JSON as string
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

// Audit Trail
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues String?  // JSON as string
  newValues String?  // JSON as string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

// Analytics Schema
model Analytics {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  sessionId String?
  properties String?  // JSON as string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([createdAt])
  @@map("analytics")
}

// System Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("STRING")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_configs")
}