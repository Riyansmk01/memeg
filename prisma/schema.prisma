// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phoneNumber   String?
  address       String?
  personalId    String?
  bankAccount   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  role          String    @default("user")
  preferences   String?   // JSON as string for SQLite
  metadata      String?   // JSON as string for SQLite

  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  auditLogs     AuditLog[]
  apiKeys       ApiKey[]

  @@index([email])
  @@index([createdAt])
  @@index([isActive])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  plan              String   @default("free")
  status            String   @default("active")
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  cancelledAt       DateTime?
  trialEndsAt       DateTime?
  metadata          String?  // JSON as string for SQLite

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@map("subscriptions")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  currency      String   @default("IDR")
  status        String
  paymentMethod String
  bankCode      String?
  qrCode        String?
  referenceId   String   @unique
  externalId    String?
  metadata      String?  // JSON as string for SQLite
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  failedAt      DateTime?
  refundedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@map("payments")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions String   // JSON as string for SQLite
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues String?  // JSON as string for SQLite
  newValues String?  // JSON as string for SQLite
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  sessionId String?
  properties String?  // JSON as string for SQLite
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([createdAt])
  @@map("analytics")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_configs")
}